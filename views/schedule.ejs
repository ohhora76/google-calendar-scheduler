<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - 스케줄</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* 추가 스타일 */
        .calendar-day.has-schedule {
            background-color: #fee2e2;
            border-color: #fecaca;
            cursor: default;
        }
        .calendar-day.has-schedule .day-number {
            color: #dc2626;
            font-weight: 600;
        }
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
            color: #6b7280;
        }
    </style>
</head>
<body>
    <div class="calendar-container">
        <header class="calendar-header">
            <h1><%= title %></h1>
            <div class="calendar-nav">
                <button onclick="navigateMonth(-1)" class="nav-btn">‹ 이전</button>
                <h2 class="current-month">
                    <%= year %>년 <%= month %>월
                </h2>
                <button onclick="navigateMonth(1)" class="nav-btn">다음 ›</button>
            </div>
        </header>

        <main class="calendar-main">
            <div class="calendar-grid">
                <div class="calendar-weekdays">
                    <div class="weekday">일</div>
                    <div class="weekday">월</div>
                    <div class="weekday">화</div>
                    <div class="weekday">수</div>
                    <div class="weekday">목</div>
                    <div class="weekday">금</div>
                    <div class="weekday">토</div>
                </div>
                
                <div class="calendar-days" id="calendarDays">
                    <div class="loading">캘린더 로딩중...</div>
                </div>
            </div>
        </main>

        <footer class="calendar-footer">
            <p>마지막 업데이트: <%= new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' }) %></p>
        </footer>
    </div>

    <script>
        const currentYear = <%= year %>;
        const currentMonth = <%= month %>;
        const pageName = '<%= page_name %>';
        let scheduleDates = [];
        
        // 서버에서 전달된 날짜가 있으면 사용
        <% if (typeof events !== 'undefined' && events) { %>
            scheduleDates = <%- JSON.stringify(events.map(e => e.date)) %>;
        <% } %>
        
        function navigateMonth(direction) {
            let newYear = currentYear;
            let newMonth = currentMonth + direction;
            
            if (newMonth < 1) {
                newMonth = 12;
                newYear--;
            } else if (newMonth > 12) {
                newMonth = 1;
                newYear++;
            }
            
            window.location.href = `/${pageName}?year=${newYear}&month=${newMonth}`;
        }
        
        async function loadScheduleDates() {
            try {
                const response = await fetch(`/api/public/${pageName}/dates?year=${currentYear}&month=${currentMonth}`);
                if (response.ok) {
                    const data = await response.json();
                    scheduleDates = data.dates || [];
                    generateCalendar();
                } else {
                    console.error('Failed to load schedule dates');
                    generateCalendar();
                }
            } catch (error) {
                console.error('Error loading schedule dates:', error);
                generateCalendar();
            }
        }
        
        function generateCalendar() {
            const calendarDays = document.getElementById('calendarDays');
            calendarDays.innerHTML = ''; // Clear loading message
            
            const firstDay = new Date(currentYear, currentMonth - 1, 1);
            const lastDay = new Date(currentYear, currentMonth, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();
            
            // 이전 달의 날짜들
            const prevMonthDays = new Date(currentYear, currentMonth - 1, 0).getDate();
            for (let i = startingDayOfWeek - 1; i >= 0; i--) {
                const dayElement = createDayElement(prevMonthDays - i, 'prev-month');
                calendarDays.appendChild(dayElement);
            }
            
            // 현재 달의 날짜들
            for (let day = 1; day <= daysInMonth; day++) {
                const dayElement = createDayElement(day, 'current-month');
                
                // 스케줄이 있는 날짜인지 확인
                const dateStr = `${currentYear}-${String(currentMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                if (scheduleDates.includes(dateStr)) {
                    dayElement.classList.add('has-schedule');
                    dayElement.title = '일정이 있습니다';
                }
                
                
                calendarDays.appendChild(dayElement);
            }
            
            // 다음 달의 날짜들 (6주 완성)
            const totalCells = calendarDays.children.length;
            const remainingCells = 42 - totalCells; // 6주 × 7일
            for (let day = 1; day <= remainingCells; day++) {
                const dayElement = createDayElement(day, 'next-month');
                calendarDays.appendChild(dayElement);
            }
        }
        
        function createDayElement(day, monthClass) {
            const dayDiv = document.createElement('div');
            dayDiv.className = `calendar-day ${monthClass}`;
            dayDiv.innerHTML = `<span class="day-number">${day}</span>`;
            return dayDiv;
        }
        
        // 페이지 로드시 실행
        if (scheduleDates.length > 0) {
            // 서버에서 데이터를 받은 경우 바로 렌더링
            generateCalendar();
        } else {
            // 아니면 API 호출
            loadScheduleDates();
        }
        
        // 자동 새로고침 (5분마다)
        setTimeout(() => {
            location.reload();
        }, 5 * 60 * 1000);
    </script>
</body>
</html>